tagInputId: "**Sample tag input tooltip**"
idforexpressioninput: Here's an [**important** anchor link](#example)
jiraApprovalProject: Jira Project Key
jiraApprovalIssueType: Project Issue Type
jiraApprovalIssueKey: Jira Issue key
ONNtooltipId: Your pipeline name
specifyYourService: Harness Services represent your microservices/apps logically. You can propagate the same Service to as many stages as you need.
stageOverviewDeploymentType: Select the platform for your deployment. When you select a platform, its specific specs and settings appear.
deploymentTypeManifests: Add the configuration files that describe the desired state of your app in terms of Kubernetes API object descriptions. All files in **Manifests** must have the .yaml file extension. [Learn More](https://ngdocs.harness.io/article/ssbq0xh0hx)
deploymentTypeArtifacts: |-
    If the image location is not specified in your Deployment manifest, you can add the image location to Harness as an Artifact. 
    Next, you reference the Artifact you added to Harness in your manifest like this:
    `image: <+artifact.image>` 
    [Learn More](https://ngdocs.harness.io/article/4ifq51cp0i)
ciEditStage_name: Enter a name for the stage. [Learn more](https://ngdocs.harness.io/article/2chyf1acil)
ciEditStage_repoName: Enter the name of the Git repo containing your codebase. [Learn more](https://ngdocs.harness.io/article/8l31vtr4hi)
ciBuildStage_name: Enter a name for the stage. [Learn More](https://ngdocs.harness.io/article/2chyf1acil-add-a-stage)
dependencyBase_name: Enter a name for this Service Dependency step. [Learn More](https://ngdocs.harness.io/article/vo4sjbd09g-configure-service-dependency-step-settings)
ciRunStep_name: The Run step executes one or more commands on a container image. Enter a name for this Run step. [Learn More](https://ngdocs.harness.io/article/1i1ttvftm4-run-step-settings)
pluginStep_name: |-
    Enter a unique name for this Plugin step. 

    Plugins are Docker containers that perform predefined tasks. Plugins are configured as steps in your stage. Plugins can be used to deploy code, publish artifacts, send notifications, and more. [Learn More](https://ngdocs.harness.io/article/8r5c3yvb8k)
restoreCacheS3_name: |-
    Enter a name for this step.

    The [Save Cache to S3](https://ngdocs.harness.io/article/qtvjvrp9sn) step preserves files and directories between builds.

    You can restore cache using the [Restore Cache from S3](https://ngdocs.harness.io/article/zlpx6lli6d) step.
restoreCacheGcs_name: |-
    Enter a name for this step.

    The [Restore Cache from GCS](https://ngdocs.harness.io/article/e2o4sektz1) step restores files and directories that were saved using the [Save Cache to GCS](https://ngdocs.harness.io/article/11nzeuntrz) step.
savedS3Cache_name: |-
    Enter a name for this step.

    The [Save Cache to S3](https://ngdocs.harness.io/article/qtvjvrp9sn) step preserves files and directories between builds.

    You can restore cache using the [Restore Cache from S3](https://ngdocs.harness.io/article/zlpx6lli6d) step.
savedCacheGcs_name: |-
    Enter a name for this step.

    The [Restore Cache from GCS](https://ngdocs.harness.io/article/e2o4sektz1) step restores files and directories that were saved using the [Save Cache to GCS](https://ngdocs.harness.io/article/11nzeuntrz) step.
dockerHubStep_name: |-
    Enter a name for this step.

    The [Build and Push an Image to Docker Registry](https://ngdocs.harness.io/article/q6fr5bj63w) step creates a Docker image from a Dockerfile and pushes it to a Docker registry.
ciGcrStep_name: |-
    Enter a name for this step.

    The [Build and Push to GCR](https://ngdocs.harness.io/article/66ykcm0sf0) step creates a Docker image from a Dockerfile and pushes it to a GCR Docker repository.
ciEcrStep_name: |-
    Enter a name for this step.

    The [Build and Push to ECR](https://ngdocs.harness.io/article/aiqbxaef15) step creates a Docker image from a Dockerfile and pushes it to an ECR Docker repository.
jfrogArt_name: |-
    Enter a name for this step.

    The [Upload Artifacts to JFrog Artifactory](https://ngdocs.harness.io/article/gjoggc66fy) step creates a Docker image from a Dockerfile and pushes it to a JFrog Artifactory Docker repository.
conditionalExecution: |-
    Conditional Execution uses JEXL operators and expressions. [Learn More](https://commons.apache.org/proper/commons-jexl/reference/syntax.html)

     
    Examples:

     
    `<+steps.mystep.output.status> == “success”`
    `<+environment.name> != “QA”`
projectsForm_name: Enter a name for the project. [Learn more](https://ngdocs.harness.io/article/36fw2u92i4-create-an-organization)
projectsForm_color: Select a color for the project. [Learn more](https://ngdocs.harness.io/article/36fw2u92i4-create-an-organization)
projectsForm_orgIdentifier: Select an org for your project. [Learn more](https://ngdocs.harness.io/article/36fw2u92i4-create-an-organization)
passwordStrengthForm_minNumberOfCharacters: Enter a minimum length for the passwords. [Learn more](https://ngdocs.harness.io/article/gdob5gvyco-authentication-overview)
passwordExpirationForm_daysBeforePasswordExpire: After how many days the password must expire? [Learn more](https://ngdocs.harness.io/article/gdob5gvyco-authentication-overview)
passwordExpirationForm_daysBeforeUserNotified: How many days before password expiration should the user be notified?  [Learn more](https://ngdocs.harness.io/article/gdob5gvyco-authentication-overview)
lockoutPolicyForm_numberOfFailedAttemptsBeforeLockout: After how many failed logins user is locked out?  [Learn more](https://ngdocs.harness.io/article/gdob5gvyco-authentication-overview)
lockoutPolicyForm_lockOutPeriod: Enter the period for which user would be locked out.  [Learn more](https://ngdocs.harness.io/article/gdob5gvyco-authentication-overview)
samlProviderForm_displayName: Enter a name for the SAML Provider. [Learn more](https://ngdocs.harness.io/article/mlpksc7s6c-single-sign-on-saml)
samlProviderForm_groupMembershipAttr: Enter the Group Attribute Name from your SAML Provider. [Learn more](https://ngdocs.harness.io/article/mlpksc7s6c-single-sign-on-saml)
connectorDetailsStepForm_name: Enter a name for the Connector. This is the name you will use to select this Connector in stage and step settings.
awsKmsConfigForm_credType: Select a credential type for authentication. [Learn more](https://ngdocs.harness.io/article/pt52h8sb6z-add-an-aws-kms-secrets-manager)
awsKmsConfigForm_accessKey: Enter your AWS Access Key ID. [Learn more](https://ngdocs.harness.io/article/pt52h8sb6z-add-an-aws-kms-secrets-manager)
awsKmsConfigForm_secretKey: Enter the Secret Key for your AWS Access Key ID. [Learn more](https://ngdocs.harness.io/article/pt52h8sb6z-add-an-aws-kms-secrets-manager)
awsKmsConfigForm_awsArn: Enter the Amazon Resource Name (ARN).  [Learn more](https://ngdocs.harness.io/article/pt52h8sb6z-add-an-aws-kms-secrets-manager)
awsKmsConfigForm_region: Select the AWS Region for the Secrets Manager.  [Learn more](https://ngdocs.harness.io/article/pt52h8sb6z-add-an-aws-kms-secrets-manager#region)
awsKmsConfigForm_default: Make this your default secrets manager.  [Learn more](https://ngdocs.harness.io/article/pt52h8sb6z-add-an-aws-kms-secrets-manager#region)
azureKeyVaultForm_clientId: Enter the Application (client) ID of your Azure app.  [Learn more](https://ngdocs.harness.io/article/53jrd1cv4i-azure-key-vault)
azureKeyVaultForm_tenantId: Enter the Directory (tenant) ID of the Azure App Directory.  [Learn more](https://ngdocs.harness.io/article/53jrd1cv4i-azure-key-vault)
azureKeyVaultForm_subscription: Enter your Azure Subscription ID.  [Learn more](https://ngdocs.harness.io/article/53jrd1cv4i-azure-key-vault)
azureKeyVaultForm_secretKey: Enter azure authentication key.  [Learn more](https://ngdocs.harness.io/article/53jrd1cv4i-azure-key-vault)
azureKeyVaultForm_vaultName: Select the Vault you want to use. [Learn more](https://ngdocs.harness.io/article/53jrd1cv4i-azure-key-vault)
azureKeyVaultForm_default: Make this your default secrets manager. [Learn more](https://ngdocs.harness.io/article/53jrd1cv4i-azure-key-vault)
vaultConfigForm_vaultUrl: Enter the Vault URL. [Learn more](https://ngdocs.harness.io/article/s65mzbyags-add-hashicorp-vault)
vaultConfigForm_basePath: Enter the Base Secret Path. [Learn more](https://ngdocs.harness.io/article/s65mzbyags-add-hashicorp-vault)
vaultConfigForm_accessType: Select the Authentication Type.  [Learn more](https://ngdocs.harness.io/article/s65mzbyags-add-hashicorp-vault)
vaultConfigForm_authToken: Enter Periodic Token.  [Learn more](https://ngdocs.harness.io/article/s65mzbyags-add-hashicorp-vault)
vaultConfigForm_appRoleId: Enter the App Role ID.  [Learn more](https://ngdocs.harness.io/article/s65mzbyags-add-hashicorp-vault)
vaultConfigForm_secretId: Enter the Secret ID. [Learn more](https://ngdocs.harness.io/article/s65mzbyags-add-hashicorp-vault)
vaultConfigForm_engineType: Select Secret Engine Type. [Learn more](https://ngdocs.harness.io/article/s65mzbyags-add-hashicorp-vault)
vaultConfigForm_secretEngineName: Enter the name of the Secret Engine. [Learn more](https://ngdocs.harness.io/article/s65mzbyags-add-hashicorp-vault)
vaultConfigForm_secretEngineVersion: Enter the engine version. [Learn more](https://ngdocs.harness.io/article/s65mzbyags-add-hashicorp-vault)
vaultConfigForm_renewalInterv: Enter how often Harness Delegate should reload the Vault access token. [Learn more](https://ngdocs.harness.io/article/s65mzbyags-add-hashicorp-vault)
vaultConfigForm_readOnly: Select to make secrets within this vault Read-Only. [Learn more](https://ngdocs.harness.io/article/s65mzbyags-add-hashicorp-vault)
vaultConfigForm_default: Make this your default secrets manager.
stepGithubAuthForm_enableAPIAccess: Select this option if you are using this GitHub Connector for a Harness [Trigger](https://ngdocs.harness.io/article/hndnde8usz-triggering-pipelines), [Harness Git Experience](https://ngdocs.harness.io/article/utikdyxgfz-harness-git-experience-overview), or authenticating using a [GitHub App](https://ngdocs.harness.io/article/nze5evmqu1-git-hub-app-support).
deployService_name: "Enter a name for this Service. You can propagate this Service in subsequent stages by selecting its name in that stage's Service settings. "
specifyYourEnvironment: |-
    Select or create a new Environment. You can select this Environment in subsequent stages.

    Environments represent your deployment targets logically (QA, Prod, etc). You can add the same Environment to as many stages are you need. Infrastructure Definitions represent your target infrastructure physically. They are the actual clusters, hosts, etc.

    By separating Environments and Infrastructure Definitions, you can use the same Environment in multiple stages while changing the target infrastructure settings with each stage.
k8InfraConnector: |-
    Select or create the Connector that connects Harness to your target cluster. [Learn More](https://ngdocs.harness.io/article/0ud2ut4vt2)

    Here's a [video](https://youtu.be/wUC23lmqfnY) that walks through setting up a Kubernetes Cluster Connector.
k8InfraNamespace: |-
    Enter the target namespace in target cluster. 

    The namespace must already exist during deployment. Harness will not create a new namespace if you enter one here. If you leave this setting empty, the `default` namespace is used. [Learn More](https://ngdocs.harness.io/article/0ud2ut4vt2)
k8InfraReleaseName: ""
manifestDetails_identifier: Enter a name that identifies this manifest. [Learn More](https://ngdocs.harness.io/article/ssbq0xh0hx)
manifestDetails_gitFetchType: Select a branch or commit ID for the manifest.
manifestDetails_commitId: Enter the commit ID in the repo where the manifest is located.
manifestDetails_branch: Enter the branch in the repo where the manifest is located, such as `main`.
imagePath_imagePath: |+
    Enter the name of the artifact you want to deploy, such as `library/nginx`. [Learn More](https://ngdocs.harness.io/article/4ifq51cp0i)

    Official images in public repos often need the label `library`, e.g. `library/tomcat`.

    Wildcards are not supported.

imagePath_tag: Enter the Docker [image tag](https://docs.docker.com/engine/reference/commandline/tag/).
harnessApproval_name: |-
    Enter a name for this **Manual Approval** step.
    [Learn More about Manual Approvals](https://ngdocs.harness.io/article/43pzzhrcbv)
harnessApproval_spec.includePipelineExecutionHistory: |-
    Enable this option to show approvers the Pipeline's execution history. This can help an approver compare the current execution info with historical data.
    [Learn More about Manual Approvals](https://ngdocs.harness.io/article/43pzzhrcbv)
harnessApproval_spec.approvers.userGroups: |-
    Select the Harness User Groups that will approve the step.
    Learn More about [Manual Approvals](https://ngdocs.harness.io/article/43pzzhrcbv) and [User Groups](https://newdocs.helpdocs.io/article/dfwuvmy33m)
harnessApproval_spec.approvers.minimumCount: |-
    Enter how many of the Users in the User Groups must approve the step.
    Learn More about [Manual Approvals](https://ngdocs.harness.io/article/43pzzhrcbv) and [User Groups](https://newdocs.helpdocs.io/article/dfwuvmy33m)
harnessApproval_spec.approvers.disallowPipelineExecutor: |-
    Enable this option if you don't want the User that initiated the Pipeline execution to approve this step.
    Learn More about [Manual Approvals](https://ngdocs.harness.io/article/43pzzhrcbv) and [User Groups](https://newdocs.helpdocs.io/article/dfwuvmy33m)
terraformEdit_name: |-
    Enter a name for this step. You can use the name in expressions to refer to settings in this step.

    For example, if the name of the step is **apply** and you want to reference its **Timeout** setting, you would use:

    `<+execution.steps.apply.timeout>`

    Learn More about [Terraform Apply](https://ngdocs.harness.io/article/hdclyshiho) or [expressions](https://newdocs.helpdocs.io/article/lml71vhsim)
terraformEdit_spec.configuration.type: |-
    - **Inherit from Plan:** apply the plan of a previous [Terraform Plan](https://newdocs.helpdocs.io/article/52n3j0ci72) step by entering that step's Provisioner Identifier Id in **Provisioner Identifier**.

    - **Inline:** configure this Terraform Apply step to use a Terraform script without any Terraform Plan step.

    [Learn More](https://ngdocs.harness.io/article/hdclyshiho)
terraformEdit_spec.provisionerIdentifier: |-
    The Id you enter here identifies its provisioning. 

    What Id you enter depends on what you selected in **Configuration Type**:

    - **Inherit from Plan:** enter the Provisioner Identifier Id of a previous [Terraform Plan](https://newdocs.helpdocs.io/article/52n3j0ci72) step. This Terraform Apply step will apply that plan and all its settings. 
    - **Inline:** enter a unique Id for this Terraform Apply step. This Terraform Apply step will apply its own Terraform script and settings. You can use the Id in subsequent [Terraform Rollback](https://ngdocs.harness.io/article/jgi6d73noy) and [Terraform Destroy](https://ngdocs.harness.io/article/j75xc704c8) steps.

    [Learn More](https://ngdocs.harness.io/article/hdclyshiho)
k8InfraAllowSimultaneousDeployments: Enable this setting to provision the target infrastructure for this stage. Harness will provision the target infrastructure and then deploy to it using the steps in **Execution**. [Learn More](https://ngdocs.harness.io/article/uznls2lvod)
